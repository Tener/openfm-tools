#!/usr/bin/python3
# -*- encoding: utf-8 -*-

from urllib.request import urlopen
import json
from subprocess import Popen, PIPE
import os
import io
import logging
import time
import datetime

from multiprocessing import Process

plsurl = 'http://open.fm/getplaylist.php'
chanurl = 'http://gr-relay-%d.gaduradio.pl/%d'
music_player = 'mplayer'
dmenu_bin = 'dmenu'

def getChanURL( chanID, servID = 1 ):
    return (chanurl % (servID,chanID))

def getCurrSong( chanID ):
    raw = urlopen(plsurl).read().decode('utf-8')
    chans = dict( [ (int(chan['id']), chan) for chan in json.loads(raw)['open_channels']] )
    curr_song = chans[chanID]['current_song']
    return curr_song

def getChannels():
    raw = urlopen(plsurl).read().decode('utf-8')
    return ([ ((int(chan['id']),chan['title'].strip())) for chan in json.loads(raw)['open_channels']])

def ask_dmenu(items):
    inp = "\n".join(items)
    p = Popen([dmenu_bin,"-i"], stdout=PIPE, stdin=PIPE, shell=True)

    p.stdin.write(inp.encode())
    p.stdin.close()

    output = p.stdout.read().decode()

    return output

def main_cli():
    chans = sorted(getChannels())

#def reverse_dict(dc):
#    return dict( [ (val,key) for (key,val) in dc.items() ] )
    
def main_dmenu():
    chans = dict(sorted(getChannels()))

    dmenu_items = []
    for (key,val) in chans.items():
        dmenu_items.append(str(key).lower())
        dmenu_items.append(str(val).lower())

    dmenu_dict = dict( [(str(key).lower(),key) for key in chans.keys()] +
                       [(val.lower(),key) for (key,val) in chans.items()] )

    # last station
    last = get_last_station()
    if last:
        item = 'LAST_STATION:%d' % last
        dmenu_items.insert(0,item)
        dmenu_dict[item] = last
    
    val = ask_dmenu(dmenu_items)
    chan = dmenu_dict.get(val)

    if chan: # may be None, if the user didn't choose anything from dmenu
        save_last_station(chan) # save chan
        

        # notify about channel
        notify(chans[chan], chan)
        url = getChanURL(chan)

        # song watcher -  notification on song change
        sw = Process( target=song_watcher, args=(chan,) )
        sw.start()

        # run media player
        p = Popen([music_player, url])
        p.wait()

        # cleanup
        sw.terminate()

def notify(chan_name, chan_num):
    print("------------------------")
    print("Channel: %s (%d)" % (chan_name, chan_num))
    print("------------------------")

    # notify-send
    Popen(["notify-send","--urgency=normal","--expire-time=5000","openfm : uruchomiono stację", "Uruchomiono stację %s (id:%d)" % (chan_name, chan_num)])

def notify_song( song_data ):
    def field(name):
        val = song_data[name]
        niceName = name.replace('_',' ').capitalize()
        return formatField(niceName, val)

    def formatField( name, val ):
        return "<b>{0}</b> : <i>{1}</i>".format( name, val )

    def parseDate(field):
        return datetime.datetime.strptime(song_data[field],'%Y-%m-%d %H:%M:%S')

    # song duration
    start,stop = parseDate('play_begin'),parseDate('play_end')
    s = (stop-start).seconds
    secs = s % 60
    mins = s // 60
    duration = formatField('Duration', '{0:2}:{1:02}'.format(mins,secs))

    # album image
    icontmp  = '/tmp/openfm.album_icon.png'
    icontmp2 = '/tmp/openfm.album_icon2.png'
    #iconurl = "http://open.fm/" + song_data['album_image']
    iconurl = "http://open.fm/" + song_data['uri_local']
    f = open(icontmp,'wb')
    f.write(urlopen(iconurl).read())
    f.close()
    # resize image
    Popen(["convert","-resize","120x120",icontmp,icontmp2]).wait()
    

    song_desc = "\n".join( list(map( field, ['full_artist','full_title','album_title'])) + [duration])

    Popen(["notify-send","--urgency=normal",'-i',icontmp2,"--expire-time=10000","openfm : current song",song_desc]).wait()


def song_watcher(chan_id):
    old_song = None
    while True:
        curr_song = getCurrSong(chan_id)
        if curr_song != old_song:
            notify_song( curr_song )
            old_song = curr_song
        time.sleep(1)

# config

def make_config_dir():
    confPath = get_config_dir_path()
    if not os.path.exists(confPath):
        os.mkdir(confPath)    

def get_config_path():
    return os.path.join(get_config_dir_path(),'config')

def get_config_dir_path():
    return os.path.expanduser('~/.openfm')

def read_conf():
    confP = get_config_path()
    if os.path.exists(confP):
        f = open(confP,'r')
        d = f.read()
        f.close()
        return eval(d)

def save_last_station(chan_id):
    conf = {}
    conf['last_station'] = chan_id
    
    confPath = make_config_dir()
    f = open(get_config_path(),'w')
    f.write(str( conf ) )
    f.close()

def get_last_station():
    conf = read_conf()
    if conf:
        return conf.get('last_station')

# main

def main(mode = 'dmenu'):
    if mode == 'dmenu':
        main_dmenu()
    elif mode == 'cli':
        main_cli()
    else:
        print("Unknown mode: %s" % (str(mode)))
    
if __name__ == '__main__':
    main()


